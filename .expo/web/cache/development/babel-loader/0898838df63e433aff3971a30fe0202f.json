{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Heading from \"../components/Heading\";\nimport SearchButton from \"../components/SearchButton\";\nimport TextInputBox from \"../components/TextInput\";\nimport { fetchGeoData } from \"../fetchData\";\nimport styles from \"../styles/ViewStyle\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar SearchCountryScreen = function SearchCountryScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      inputText = _useState4[0],\n      setText = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      population = _useState6[0],\n      setPopulation = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      name = _useState8[0],\n      setName = _useState8[1];\n\n  var handleChange = function handleChange(e) {\n    setText(e.target.value);\n  };\n\n  var handleResponse = function handleResponse(r) {\n    var cities = [];\n\n    for (var i = 0; i < r['geonames'].length; i++) {\n      if (r['geonames'][i]['fclName'].includes(\"city\")) {\n        cities.push(r['geonames'][i]);\n      }\n    }\n\n    console.log(cities);\n    setPopulation(r['geonames'][0]['population']);\n    setName(r['geonames'][0]['name']);\n  };\n\n  var handleClick = function handleClick() {\n    setIsLoading(true);\n    fetchGeoData(inputText).then(function (response) {\n      handleResponse(response);\n    }).catch(console.log(\"Error\"));\n    setIsLoading(false);\n  };\n\n  useEffect(function () {\n    if (population > 0 && name != '') {\n      navigation.navigate(\"CountryResults\", {\n        population: population,\n        name: name\n      });\n    }\n  }, [{\n    population: population,\n    name: name\n  }]);\n  return _jsxs(View, {\n    style: styles.viewContainer,\n    children: [_jsx(Heading, {\n      text: \"SEARCH BY COUNTRY\"\n    }), _jsx(TextInputBox, {\n      plcHolder: \"Enter a country...\",\n      onChange: handleChange\n    }), !isLoading ? _jsx(SearchButton, {\n      onPress: handleClick\n    }) : _jsx(ActivityIndicator, {\n      size: \"large\"\n    })]\n  });\n};\n\nexport default SearchCountryScreen;","map":{"version":3,"sources":["/Users/akseluhr/Documents/GitHub/CityPop/screens/SearchCountryScreen.js"],"names":["React","useEffect","useState","Heading","SearchButton","TextInputBox","fetchGeoData","styles","SearchCountryScreen","navigation","isLoading","setIsLoading","inputText","setText","population","setPopulation","name","setName","handleChange","e","target","value","handleResponse","r","cities","i","length","includes","push","console","log","handleClick","then","response","catch","navigate","viewContainer"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { View, ActivityIndicator } from 'react-native';\nimport Heading from \"../components/Heading\";\nimport SearchButton from '../components/SearchButton';\nimport TextInputBox from \"../components/TextInput\"\nimport { fetchGeoData } from '../fetchData';\n//import styles from \"../styles/ButtonsStyle\"\nimport styles from \"../styles/ViewStyle\"\n\nconst SearchCountryScreen = ({navigation}) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [inputText, setText] = useState('')\n  const [population, setPopulation] = useState()\n  const [name, setName] = useState('')\n\n  const handleChange = (e) =>{\n    setText(e.target.value)\n  }\n  const handleResponse = (r) => {\n    let cities = []\n    for(let i = 0; i < r['geonames'].length; i++){\n      if(r['geonames'][i]['fclName'].includes(\"city\")){\n        cities.push(r['geonames'][i])\n      }\n    }\n\n    console.log(cities)\n    setPopulation(r['geonames'][0]['population'])\n    setName(r['geonames'][0]['name'])\n  }\n  const handleClick = () =>{\n    setIsLoading(true)\n    fetchGeoData(inputText).then(response => {handleResponse(response)}).catch(console.log(\"Error\"))\n    setIsLoading(false)\n  }\n\n  useEffect(() => {\n    if(population > 0 && name != ''){\n      navigation.navigate(\"CountryResults\", {\n        population: population,\n        name: name\n      })\n    }\n  }, [{population, name}])\n    return (\n        <View style={styles.viewContainer}>\n          <Heading   text=\"SEARCH BY COUNTRY\" />\n          <TextInputBox plcHolder=\"Enter a country...\" onChange={handleChange}/>\n          {!isLoading ? (<SearchButton onPress={handleClick} />) : <ActivityIndicator size=\"large\" />}\n       </View>\n    )\n  }\n  export default SearchCountryScreen;"]},"metadata":{},"sourceType":"module"}