{"ast":null,"code":"var fetchGeoData1 = function fetchGeoData1() {\n  fetch('http://api.geonames.org/searchJSON?q=london&maxRows=10&username=weknowit').then(function (response) {\n    return response.json;\n  }).then(function (data) {\n    return console.log(data);\n  });\n};\n\nvar fetchGeoData = function fetchGeoData(isCountrySearch, userInput) {\n  var request = new XMLHttpRequest();\n  var data;\n  var result;\n  request.open(\"GET\", \"http://api.geonames.org/searchJSON?q=\" + userInput + \"&maxRows=100&username=weknowit\");\n  request.send();\n\n  request.onload = function () {\n    console.log(request);\n\n    if (request.status == 200) {\n      data = JSON.parse(request.response);\n      console.log(\"data 11\", data);\n      result = filterAndSortResult(isCountrySearch, data);\n    } else {\n      console.log('error');\n    }\n  };\n\n  return data;\n};\n\nvar filterAndSortResult = function filterAndSortResult(isCountrySearch, data) {\n  if (isCountrySearch) {\n    console.log(\"hej\", data['geonames'][0]['population']);\n  }\n};\n\nvar getSearchResults = function getSearchResults(isCountrySearch, userInput) {\n  var data = fetchGeoData(isCountrySearch, userInput);\n};\n\nexport { getSearchResults };","map":{"version":3,"sources":["/Users/akseluhr/Documents/GitHub/CityPop/fetchData.js"],"names":["fetchGeoData1","fetch","then","response","json","data","console","log","fetchGeoData","isCountrySearch","userInput","request","XMLHttpRequest","result","open","send","onload","status","JSON","parse","filterAndSortResult","getSearchResults"],"mappings":"AAAA,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AACxBC,EAAAA,KAAK,CAAC,0EAAD,CAAL,CACGC,IADH,CACQ,UAAAC,QAAQ;AAAA,WAAIA,QAAQ,CAACC,IAAb;AAAA,GADhB,EAEGF,IAFH,CAEQ,UAAAG,IAAI;AAAA,WAAIC,OAAO,CAACC,GAAR,CAAYF,IAAZ,CAAJ;AAAA,GAFZ;AAGC,CAJL;;AAOA,IAAMG,YAAY,GAAG,SAAfA,YAAe,CAACC,eAAD,EAAkBC,SAAlB,EAA+B;AAClD,MAAIC,OAAO,GAAG,IAAIC,cAAJ,EAAd;AACA,MAAIP,IAAJ;AACA,MAAIQ,MAAJ;AACAF,EAAAA,OAAO,CAACG,IAAR,CAAa,KAAb,EAAoB,0CAAwCJ,SAAxC,GAAkD,gCAAtE;AACAC,EAAAA,OAAO,CAACI,IAAR;;AACAJ,EAAAA,OAAO,CAACK,MAAR,GAAiB,YAAM;AACrBV,IAAAA,OAAO,CAACC,GAAR,CAAYI,OAAZ;;AACA,QAAGA,OAAO,CAACM,MAAR,IAAkB,GAArB,EAAyB;AACvBZ,MAAAA,IAAI,GAAGa,IAAI,CAACC,KAAL,CAAWR,OAAO,CAACR,QAAnB,CAAP;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,IAAvB;AACAQ,MAAAA,MAAM,GAAGO,mBAAmB,CAACX,eAAD,EAAkBJ,IAAlB,CAA5B;AACD,KAJD,MAKI;AACFC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACD;AACF,GAVD;;AAWA,SAAOF,IAAP;AACD,CAlBD;;AAqBA,IAAMe,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACX,eAAD,EAAkBJ,IAAlB,EAA0B;AACpD,MAAGI,eAAH,EAAmB;AACjBH,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBF,IAAI,CAAC,UAAD,CAAJ,CAAiB,CAAjB,EAAoB,YAApB,CAAnB;AACD;AACF,CAJD;;AAKA,IAAMgB,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACZ,eAAD,EAAkBC,SAAlB,EAAgC;AACvD,MAAIL,IAAI,GAAGG,YAAY,CAACC,eAAD,EAAkBC,SAAlB,CAAvB;AAED,CAHD;;AAIA,SAAQW,gBAAR","sourcesContent":["const fetchGeoData1 = () =>Â {\n    fetch('http://api.geonames.org/searchJSON?q=london&maxRows=10&username=weknowit')\n      .then(response => response.json)\n      .then(data => console.log(data));\n    }\n\n\nconst fetchGeoData = (isCountrySearch, userInput) =>{\n  let request = new XMLHttpRequest();\n  let data;\n  let result;\n  request.open(\"GET\", \"http://api.geonames.org/searchJSON?q=\"+userInput+\"&maxRows=100&username=weknowit\")\n  request.send();\n  request.onload = () => {\n    console.log(request);\n    if(request.status == 200){\n      data = JSON.parse(request.response)\n      console.log(\"data 11\", data)\n      result = filterAndSortResult(isCountrySearch, data) \n    }\n    else{\n      console.log('error')\n    }\n  }\n  return data\n}\n\n\nconst filterAndSortResult = (isCountrySearch, data) =>{\n  if(isCountrySearch){\n    console.log(\"hej\", data['geonames'][0]['population'])\n  }\n}\nconst getSearchResults = (isCountrySearch, userInput) => {\n  let data = fetchGeoData(isCountrySearch, userInput)\n  //let result = filterAndSortResult(isCountrySearch, data)\n}\nexport {getSearchResults};"]},"metadata":{},"sourceType":"module"}