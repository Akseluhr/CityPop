{"ast":null,"code":"var fetchGeoData1 = function fetchGeoData1() {\n  fetch('http://api.geonames.org/searchJSON?q=london&maxRows=10&username=weknowit').then(function (response) {\n    return response.json;\n  }).then(function (data) {\n    return console.log(data);\n  });\n};\n\nvar fetchGeoData = function fetchGeoData(userInput) {\n  var request = new XMLHttpRequest();\n  request.open(\"GET\", \"http://api.geonames.org/searchJSON?q=\" + userInput + \"&maxRows=100&username=weknowit\");\n  request.send();\n\n  request.onload = function () {\n    console.log(request);\n    request.status == 200 ? console.log(JSON.parse(request.response)) : console.log(\"error\");\n  };\n};\n\nvar filterAndSortResult = function filterAndSortResult(isCountrySearch, data) {\n  console.log(data);\n\n  if (isCountrySearch) {}\n};\n\nvar getSearchResults = function getSearchResults(isCountrySearch, userInput) {\n  fetchGeoData(userInput);\n};\n\nexport { getSearchResults };","map":{"version":3,"sources":["/Users/akseluhr/Documents/GitHub/CityPop/fetchData.js"],"names":["fetchGeoData1","fetch","then","response","json","data","console","log","fetchGeoData","userInput","request","XMLHttpRequest","open","send","onload","status","JSON","parse","filterAndSortResult","isCountrySearch","getSearchResults"],"mappings":"AAAA,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AACxBC,EAAAA,KAAK,CAAC,0EAAD,CAAL,CACGC,IADH,CACQ,UAAAC,QAAQ;AAAA,WAAIA,QAAQ,CAACC,IAAb;AAAA,GADhB,EAEGF,IAFH,CAEQ,UAAAG,IAAI;AAAA,WAAIC,OAAO,CAACC,GAAR,CAAYF,IAAZ,CAAJ;AAAA,GAFZ;AAGC,CAJL;;AAOA,IAAMG,YAAY,GAAG,SAAfA,YAAe,CAACC,SAAD,EAAc;AACjC,MAAIC,OAAO,GAAG,IAAIC,cAAJ,EAAd;AAEAD,EAAAA,OAAO,CAACE,IAAR,CAAa,KAAb,EAAoB,0CAAwCH,SAAxC,GAAkD,gCAAtE;AACAC,EAAAA,OAAO,CAACG,IAAR;;AACAH,EAAAA,OAAO,CAACI,MAAR,GAAiB,YAAM;AACrBR,IAAAA,OAAO,CAACC,GAAR,CAAYG,OAAZ;AACAA,IAAAA,OAAO,CAACK,MAAR,IAAkB,GAAlB,GAAwBT,OAAO,CAACC,GAAR,CAAYS,IAAI,CAACC,KAAL,CAAWP,OAAO,CAACP,QAAnB,CAAZ,CAAxB,GAAoEG,OAAO,CAACC,GAAR,CAAY,OAAZ,CAApE;AACD,GAHD;AAID,CATD;;AAYA,IAAMW,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,eAAD,EAAkBd,IAAlB,EAA0B;AACpDC,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;;AACA,MAAGc,eAAH,EAAmB,CAElB;AACF,CALD;;AAMA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACD,eAAD,EAAkBV,SAAlB,EAAgC;AACvDD,EAAAA,YAAY,CAACC,SAAD,CAAZ;AAED,CAHD;;AAIA,SAAQW,gBAAR","sourcesContent":["const fetchGeoData1 = () =>Â {\n    fetch('http://api.geonames.org/searchJSON?q=london&maxRows=10&username=weknowit')\n      .then(response => response.json)\n      .then(data => console.log(data));\n    }\n\n\nconst fetchGeoData = (userInput) =>{\n  let request = new XMLHttpRequest();\n\n  request.open(\"GET\", \"http://api.geonames.org/searchJSON?q=\"+userInput+\"&maxRows=100&username=weknowit\")\n  request.send();\n  request.onload = () => {\n    console.log(request);\n    request.status == 200 ? console.log(JSON.parse(request.response)) : console.log(\"error\")\n  }\n}\n\n\nconst filterAndSortResult = (isCountrySearch, data) =>{\n  console.log(data)\n  if(isCountrySearch){\n    \n  }\n}\nconst getSearchResults = (isCountrySearch, userInput) => {\n  fetchGeoData(userInput)\n  //.then(filterAndSortResult(isCountrySearch, data))\n}\nexport {getSearchResults};"]},"metadata":{},"sourceType":"module"}