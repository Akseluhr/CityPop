{"ast":null,"code":"var fetchGeoData1 = function fetchGeoData1() {\n  fetch('http://api.geonames.org/searchJSON?q=london&maxRows=10&username=weknowit').then(function (response) {\n    return response.json;\n  }).then(function (data) {\n    return console.log(data);\n  });\n};\n\nvar data = [];\n\nvar fetchGeoData = function fetchGeoData(userInput) {\n  var request = new XMLHttpRequest();\n  var result;\n  request.open(\"GET\", \"http://api.geonames.org/searchJSON?q=\" + userInput + \"&maxRows=100&username=weknowit\");\n  request.send();\n\n  request.onload = function () {\n    console.log(request);\n\n    if (request.status == 200) {\n      data.push(JSON.parse(request.response));\n      console.log(\"data 11\", data);\n    } else {\n      console.log('error');\n    }\n  };\n\n  console.log(\"DATAAA\", data);\n};\n\nvar filterAndSortResult = function filterAndSortResult(isCountrySearch, data) {\n  if (isCountrySearch) {\n    data = fetchGeoData();\n    console.log(\"hej\", data['geonames'][0]['population']);\n    return data['geonames'][0]['population'];\n  }\n};\n\nvar getSearchResults = function getSearchResults(isCountrySearch, userInput) {\n  var data = filterAndSortResult(isCountrySearch, data);\n  console.log(data);\n};\n\nexport { getSearchResults };","map":{"version":3,"sources":["/Users/akseluhr/Documents/GitHub/CityPop/fetchData.js"],"names":["fetchGeoData1","fetch","then","response","json","data","console","log","fetchGeoData","userInput","request","XMLHttpRequest","result","open","send","onload","status","push","JSON","parse","filterAndSortResult","isCountrySearch","getSearchResults"],"mappings":"AAAA,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AACxBC,EAAAA,KAAK,CAAC,0EAAD,CAAL,CACGC,IADH,CACQ,UAAAC,QAAQ;AAAA,WAAIA,QAAQ,CAACC,IAAb;AAAA,GADhB,EAEGF,IAFH,CAEQ,UAAAG,IAAI;AAAA,WAAIC,OAAO,CAACC,GAAR,CAAYF,IAAZ,CAAJ;AAAA,GAFZ;AAGC,CAJL;;AAMA,IAAIA,IAAI,GAAG,EAAX;;AAEA,IAAMG,YAAY,GAAG,SAAfA,YAAe,CAACC,SAAD,EAAc;AACjC,MAAIC,OAAO,GAAG,IAAIC,cAAJ,EAAd;AACA,MAAIC,MAAJ;AACAF,EAAAA,OAAO,CAACG,IAAR,CAAa,KAAb,EAAoB,0CAAwCJ,SAAxC,GAAkD,gCAAtE;AACAC,EAAAA,OAAO,CAACI,IAAR;;AACAJ,EAAAA,OAAO,CAACK,MAAR,GAAiB,YAAM;AACrBT,IAAAA,OAAO,CAACC,GAAR,CAAYG,OAAZ;;AACA,QAAGA,OAAO,CAACM,MAAR,IAAkB,GAArB,EAAyB;AACvBX,MAAAA,IAAI,CAACY,IAAL,CAAUC,IAAI,CAACC,KAAL,CAAWT,OAAO,CAACP,QAAnB,CAAV;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,IAAvB;AAED,KAJD,MAKI;AACFC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACD;AACF,GAVD;;AAWAD,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,IAAtB;AACD,CAjBD;;AAoBA,IAAMe,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,eAAD,EAAkBhB,IAAlB,EAA0B;AACpD,MAAGgB,eAAH,EAAmB;AACjBhB,IAAAA,IAAI,GAAGG,YAAY,EAAnB;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBF,IAAI,CAAC,UAAD,CAAJ,CAAiB,CAAjB,EAAoB,YAApB,CAAnB;AACA,WAAOA,IAAI,CAAC,UAAD,CAAJ,CAAiB,CAAjB,EAAoB,YAApB,CAAP;AACD;AACF,CAND;;AAOA,IAAMiB,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACD,eAAD,EAAkBZ,SAAlB,EAAgC;AACvD,MAAIJ,IAAI,GAAGe,mBAAmB,CAACC,eAAD,EAAkBhB,IAAlB,CAA9B;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACD,CAJD;;AAKA,SAAQiB,gBAAR","sourcesContent":["const fetchGeoData1 = () =>Â {\n    fetch('http://api.geonames.org/searchJSON?q=london&maxRows=10&username=weknowit')\n      .then(response => response.json)\n      .then(data => console.log(data));\n    }\n\nlet data = []\n\nconst fetchGeoData = (userInput) =>{\n  let request = new XMLHttpRequest();\n  let result;\n  request.open(\"GET\", \"http://api.geonames.org/searchJSON?q=\"+userInput+\"&maxRows=100&username=weknowit\")\n  request.send();\n  request.onload = () => {\n    console.log(request);\n    if(request.status == 200){\n      data.push(JSON.parse(request.response))\n      console.log(\"data 11\", data)\n      //result = filterAndSortResult(isCountrySearch, data) \n    }\n    else{\n      console.log('error')\n    }\n  }\n  console.log(\"DATAAA\", data)\n}\n\n\nconst filterAndSortResult = (isCountrySearch, data) =>{\n  if(isCountrySearch){\n    data = fetchGeoData()\n    console.log(\"hej\", data['geonames'][0]['population'])\n    return data['geonames'][0]['population'];\n  }\n}\nconst getSearchResults = (isCountrySearch, userInput) => {\n  var data = filterAndSortResult(isCountrySearch, data)\n  //let result = filterAndSortResult(isCountrySearch, data)\n  console.log(data)\n}\nexport {getSearchResults};"]},"metadata":{},"sourceType":"module"}