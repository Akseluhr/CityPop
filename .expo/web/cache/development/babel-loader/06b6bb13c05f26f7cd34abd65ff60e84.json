{"ast":null,"code":"var fetchGeoData1 = function fetchGeoData1() {\n  fetch('http://api.geonames.org/searchJSON?q=london&maxRows=10&username=weknowit').then(function (response) {\n    return response.json;\n  }).then(function (data) {\n    return console.log(data);\n  });\n};\n\nvar fetchGeoData = function fetchGeoData(userInput) {\n  var request = new XMLHttpRequest();\n  var data;\n  request.open(\"GET\", \"http://api.geonames.org/searchJSON?q=\" + userInput + \"&maxRows=100&username=weknowit\");\n  request.send();\n\n  request.onload = function () {\n    console.log(request);\n\n    if (request.status == 200) {\n      data = JSON.parse(request.response);\n      console.log(\"data 11\", data['geonames'][0]['population']);\n      filterAndSortResult(isCountrySearch, data);\n    } else {\n      console.log('error');\n    }\n  };\n};\n\nvar filterAndSortResult = function filterAndSortResult(isCountrySearch, data) {\n  if (isCountrySearch) {\n    console.log(\"hej\", data['geonames']);\n  }\n};\n\nvar getSearchResults = function getSearchResults(isCountrySearch, userInput) {\n  var data = fetchGeoData(userInput);\n  var result = filterAndSortResult(isCountrySearch, data);\n};\n\nexport { getSearchResults };","map":{"version":3,"sources":["/Users/akseluhr/Documents/GitHub/CityPop/fetchData.js"],"names":["fetchGeoData1","fetch","then","response","json","data","console","log","fetchGeoData","userInput","request","XMLHttpRequest","open","send","onload","status","JSON","parse","filterAndSortResult","isCountrySearch","getSearchResults","result"],"mappings":"AAAA,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AACxBC,EAAAA,KAAK,CAAC,0EAAD,CAAL,CACGC,IADH,CACQ,UAAAC,QAAQ;AAAA,WAAIA,QAAQ,CAACC,IAAb;AAAA,GADhB,EAEGF,IAFH,CAEQ,UAAAG,IAAI;AAAA,WAAIC,OAAO,CAACC,GAAR,CAAYF,IAAZ,CAAJ;AAAA,GAFZ;AAGC,CAJL;;AAOA,IAAMG,YAAY,GAAG,SAAfA,YAAe,CAACC,SAAD,EAAc;AACjC,MAAIC,OAAO,GAAG,IAAIC,cAAJ,EAAd;AACA,MAAIN,IAAJ;AACAK,EAAAA,OAAO,CAACE,IAAR,CAAa,KAAb,EAAoB,0CAAwCH,SAAxC,GAAkD,gCAAtE;AACAC,EAAAA,OAAO,CAACG,IAAR;;AACAH,EAAAA,OAAO,CAACI,MAAR,GAAiB,YAAM;AACrBR,IAAAA,OAAO,CAACC,GAAR,CAAYG,OAAZ;;AACA,QAAGA,OAAO,CAACK,MAAR,IAAkB,GAArB,EAAyB;AACvBV,MAAAA,IAAI,GAAGW,IAAI,CAACC,KAAL,CAAWP,OAAO,CAACP,QAAnB,CAAP;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,IAAI,CAAC,UAAD,CAAJ,CAAiB,CAAjB,EAAoB,YAApB,CAAvB;AACAa,MAAAA,mBAAmB,CAACC,eAAD,EAAkBd,IAAlB,CAAnB;AACD,KAJD,MAKI;AACFC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACD;AACF,GAVD;AAYD,CAjBD;;AAoBA,IAAMW,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,eAAD,EAAkBd,IAAlB,EAA0B;AACpD,MAAGc,eAAH,EAAmB;AACjBb,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBF,IAAI,CAAC,UAAD,CAAvB;AACD;AACF,CAJD;;AAKA,IAAMe,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACD,eAAD,EAAkBV,SAAlB,EAAgC;AACvD,MAAIJ,IAAI,GAAGG,YAAY,CAACC,SAAD,CAAvB;AACA,MAAIY,MAAM,GAAGH,mBAAmB,CAACC,eAAD,EAAkBd,IAAlB,CAAhC;AACD,CAHD;;AAIA,SAAQe,gBAAR","sourcesContent":["const fetchGeoData1 = () =>Â {\n    fetch('http://api.geonames.org/searchJSON?q=london&maxRows=10&username=weknowit')\n      .then(response => response.json)\n      .then(data => console.log(data));\n    }\n\n\nconst fetchGeoData = (userInput) =>{\n  let request = new XMLHttpRequest();\n  let data;\n  request.open(\"GET\", \"http://api.geonames.org/searchJSON?q=\"+userInput+\"&maxRows=100&username=weknowit\")\n  request.send();\n  request.onload = () => {\n    console.log(request);\n    if(request.status == 200){\n      data = JSON.parse(request.response)\n      console.log(\"data 11\", data['geonames'][0]['population'])\n      filterAndSortResult(isCountrySearch, data) \n    }\n    else{\n      console.log('error')\n    }\n  }\n  //return data\n}\n\n\nconst filterAndSortResult = (isCountrySearch, data) =>{\n  if(isCountrySearch){\n    console.log(\"hej\", data['geonames'])\n  }\n}\nconst getSearchResults = (isCountrySearch, userInput) => {\n  let data = fetchGeoData(userInput)\n  let result = filterAndSortResult(isCountrySearch, data)\n}\nexport {getSearchResults};"]},"metadata":{},"sourceType":"module"}