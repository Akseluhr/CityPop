{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _excluded = [\"emit\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { CommonActions } from '@react-navigation/routers';\nimport * as React from 'react';\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\nexport default function useNavigationCache(_ref) {\n  var state = _ref.state,\n      getState = _ref.getState,\n      navigation = _ref.navigation,\n      _setOptions = _ref.setOptions,\n      router = _ref.router,\n      emitter = _ref.emitter;\n\n  var _React$useContext = React.useContext(NavigationBuilderContext),\n      stackRef = _React$useContext.stackRef;\n\n  var cache = React.useMemo(function () {\n    return {\n      current: {}\n    };\n  }, [getState, navigation, _setOptions, router, emitter]);\n\n  var actions = _objectSpread(_objectSpread({}, router.actionCreators), CommonActions);\n\n  cache.current = state.routes.reduce(function (acc, route) {\n    var previous = cache.current[route.key];\n\n    if (previous) {\n      acc[route.key] = previous;\n    } else {\n      var emit = navigation.emit,\n          rest = _objectWithoutProperties(navigation, _excluded);\n\n      var _dispatch = function dispatch(thunk) {\n        var action = typeof thunk === 'function' ? thunk(getState()) : thunk;\n\n        if (action != null) {\n          navigation.dispatch(_objectSpread({\n            source: route.key\n          }, action));\n        }\n      };\n\n      var withStack = function withStack(callback) {\n        var isStackSet = false;\n\n        try {\n          if (process.env.NODE_ENV !== 'production' && stackRef && !stackRef.current) {\n            stackRef.current = new Error().stack;\n            isStackSet = true;\n          }\n\n          callback();\n        } finally {\n          if (isStackSet && stackRef) {\n            stackRef.current = undefined;\n          }\n        }\n      };\n\n      var helpers = Object.keys(actions).reduce(function (acc, name) {\n        acc[name] = function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          return withStack(function () {\n            return _dispatch(actions[name].apply(actions, args));\n          });\n        };\n\n        return acc;\n      }, {});\n      acc[route.key] = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, rest), helpers), emitter.create(route.key)), {}, {\n        dispatch: function dispatch(thunk) {\n          return withStack(function () {\n            return _dispatch(thunk);\n          });\n        },\n        getParent: function getParent(id) {\n          if (id !== undefined && id === rest.getId()) {\n            return acc[route.key];\n          }\n\n          return rest.getParent(id);\n        },\n        setOptions: function setOptions(options) {\n          return _setOptions(function (o) {\n            return _objectSpread(_objectSpread({}, o), {}, _defineProperty({}, route.key, _objectSpread(_objectSpread({}, o[route.key]), options)));\n          });\n        },\n        isFocused: function isFocused() {\n          var state = getState();\n\n          if (state.routes[state.index].key !== route.key) {\n            return false;\n          }\n\n          return navigation ? navigation.isFocused() : true;\n        }\n      });\n    }\n\n    return acc;\n  }, {});\n  return cache.current;\n}","map":{"version":3,"mappings":"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","names":["CommonActions","React","NavigationBuilderContext","useNavigationCache","state","getState","navigation","setOptions","router","emitter","useContext","stackRef","cache","useMemo","current","actions","actionCreators","routes","reduce","acc","route","previous","key","emit","rest","dispatch","thunk","action","source","withStack","callback","isStackSet","process","env","NODE_ENV","Error","stack","undefined","helpers","Object","keys","name","args","arguments","create","getParent","id","getId","options","o","isFocused","index"],"sources":["useNavigationCache.tsx"],"sourcesContent":["import {\n  CommonActions,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport type { NavigationHelpers, NavigationProp } from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\n\ntype Options<\n  State extends NavigationState,\n  EventMap extends Record<string, any>\n> = {\n  state: State;\n  getState: () => State;\n  navigation: NavigationHelpers<ParamListBase> &\n    Partial<NavigationProp<ParamListBase, string, any, any, any>>;\n  setOptions: (\n    cb: (options: Record<string, object>) => Record<string, object>\n  ) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<EventMap>;\n};\n\ntype NavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n> = Record<\n  string,\n  NavigationProp<\n    ParamListBase,\n    string,\n    string | undefined,\n    State,\n    ScreenOptions,\n    EventMap\n  >\n>;\n\n/**\n * Hook to cache navigation objects for each screen in the navigator.\n * It's important to cache them to make sure navigation objects don't change between renders.\n * This lets us apply optimizations like `React.memo` to minimize re-rendering screens.\n */\nexport default function useNavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n>({\n  state,\n  getState,\n  navigation,\n  setOptions,\n  router,\n  emitter,\n}: Options<State, EventMap>) {\n  const { stackRef } = React.useContext(NavigationBuilderContext);\n\n  // Cache object which holds navigation objects for each screen\n  // We use `React.useMemo` instead of `React.useRef` coz we want to invalidate it when deps change\n  // In reality, these deps will rarely change, if ever\n  const cache = React.useMemo(\n    () => ({ current: {} as NavigationCache<State, ScreenOptions, EventMap> }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [getState, navigation, setOptions, router, emitter]\n  );\n\n  const actions = {\n    ...router.actionCreators,\n    ...CommonActions,\n  };\n\n  cache.current = state.routes.reduce<\n    NavigationCache<State, ScreenOptions, EventMap>\n  >((acc, route) => {\n    const previous = cache.current[route.key];\n\n    type Thunk =\n      | NavigationAction\n      | ((state: State) => NavigationAction | null | undefined);\n\n    if (previous) {\n      // If a cached navigation object already exists, reuse it\n      acc[route.key] = previous;\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { emit, ...rest } = navigation;\n\n      const dispatch = (thunk: Thunk) => {\n        const action = typeof thunk === 'function' ? thunk(getState()) : thunk;\n\n        if (action != null) {\n          navigation.dispatch({ source: route.key, ...action });\n        }\n      };\n\n      const withStack = (callback: () => void) => {\n        let isStackSet = false;\n\n        try {\n          if (\n            process.env.NODE_ENV !== 'production' &&\n            stackRef &&\n            !stackRef.current\n          ) {\n            // Capture the stack trace for devtools\n            stackRef.current = new Error().stack;\n            isStackSet = true;\n          }\n\n          callback();\n        } finally {\n          if (isStackSet && stackRef) {\n            stackRef.current = undefined;\n          }\n        }\n      };\n\n      const helpers = Object.keys(actions).reduce<Record<string, () => void>>(\n        (acc, name) => {\n          acc[name] = (...args: any) =>\n            withStack(() =>\n              // @ts-expect-error: name is a valid key, but TypeScript is dumb\n              dispatch(actions[name](...args))\n            );\n\n          return acc;\n        },\n        {}\n      );\n\n      acc[route.key] = {\n        ...rest,\n        ...helpers,\n        // FIXME: too much work to fix the types for now\n        ...(emitter.create(route.key) as any),\n        dispatch: (thunk: Thunk) => withStack(() => dispatch(thunk)),\n        getParent: (id?: string) => {\n          if (id !== undefined && id === rest.getId()) {\n            // If the passed id is the same as the current navigation id,\n            // we return the cached navigation object for the relevant route\n            return acc[route.key];\n          }\n\n          return rest.getParent(id);\n        },\n        setOptions: (options: object) =>\n          setOptions((o) => ({\n            ...o,\n            [route.key]: { ...o[route.key], ...options },\n          })),\n        isFocused: () => {\n          const state = getState();\n\n          if (state.routes[state.index].key !== route.key) {\n            return false;\n          }\n\n          // If the current screen is focused, we also need to check if parent navigator is focused\n          // This makes sure that we return the focus state in the whole tree, not just this navigator\n          return navigation ? navigation.isFocused() : true;\n        },\n      };\n    }\n\n    return acc;\n  }, {});\n\n  return cache.current;\n}\n"]},"metadata":{},"sourceType":"module"}