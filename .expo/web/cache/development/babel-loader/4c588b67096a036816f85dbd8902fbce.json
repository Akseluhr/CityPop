{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Heading from \"../components/Heading\";\nimport SearchButton from \"../components/SearchButton\";\nimport TextInputBox from \"../components/TextInput\";\nimport { fetchGeoData } from \"../fetchData\";\nimport styles from \"../styles/ViewStyle\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar SearchCityScreen = function SearchCityScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      inputText = _useState4[0],\n      setText = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      result = _useState6[0],\n      setResult = _useState6[1];\n\n  var handleChange = function handleChange(e) {\n    setText(e.target.value);\n    console.log(inputText);\n  };\n\n  var handleResponse = function handleResponse(r) {\n    setResult(r['geonames'][0]['population']);\n  };\n\n  var handleClick = function handleClick() {\n    console.log(inputText);\n    setIsLoading(true);\n    fetchGeoData(inputText).then(function (response) {\n      handleResponse(response);\n    });\n    setIsLoading(false);\n    navigation.navigate(\"CityResults\", {\n      paramKey: 10000\n    });\n  };\n\n  return _jsxs(View, {\n    style: styles.viewContainer,\n    children: [_jsx(Heading, {\n      text: \"SEARCH BY CITY\"\n    }), _jsx(TextInputBox, {\n      plcHolder: \"Enter a city...\",\n      onChange: handleChange\n    }), !isLoading ? _jsx(SearchButton, {\n      onPress: handleClick\n    }) : _jsx(ActivityIndicator, {\n      size: \"large\"\n    })]\n  });\n};\n\nexport default SearchCityScreen;","map":{"version":3,"sources":["/Users/akseluhr/Documents/GitHub/CityPop/screens/SearchCityScreen.js"],"names":["React","useState","Heading","SearchButton","TextInputBox","fetchGeoData","styles","SearchCityScreen","navigation","isLoading","setIsLoading","inputText","setText","result","setResult","handleChange","e","target","value","console","log","handleResponse","r","handleClick","then","response","navigate","paramKey","viewContainer"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAEA,OAAOC,OAAP;AACA,OAAOC,YAAP;AACA,OAAOC,YAAP;AACA,SAASC,YAAT;AAEA,OAAOC,MAAP;;;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,OAAkB;AAAA,MAAhBC,UAAgB,QAAhBA,UAAgB;;AACzC,kBAAkCP,QAAQ,CAAC,KAAD,CAA1C;AAAA;AAAA,MAAOQ,SAAP;AAAA,MAAkBC,YAAlB;;AACA,mBAA6BT,QAAQ,CAAC,EAAD,CAArC;AAAA;AAAA,MAAOU,SAAP;AAAA,MAAkBC,OAAlB;;AACA,mBAA4BX,QAAQ,CAAC,EAAD,CAApC;AAAA;AAAA,MAAOY,MAAP;AAAA,MAAeC,SAAf;;AAGA,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,CAAD,EAAM;AACzBJ,IAAAA,OAAO,CAACI,CAAC,CAACC,MAAF,CAASC,KAAV,CAAP;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYT,SAAZ;AAED,GAJD;;AAKA,MAAMU,cAAc,GAAG,SAAjBA,cAAiB,CAACC,CAAD,EAAO;AAC5BR,IAAAA,SAAS,CAACQ,CAAC,CAAC,UAAD,CAAD,CAAc,CAAd,EAAiB,YAAjB,CAAD,CAAT;AACD,GAFD;;AAGA,MAAMC,WAAW,GAAG,SAAdA,WAAc,GAAK;AACvBJ,IAAAA,OAAO,CAACC,GAAR,CAAYT,SAAZ;AACAD,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAL,IAAAA,YAAY,CAACM,SAAD,CAAZ,CAAwBa,IAAxB,CAA6B,UAAAC,QAAQ,EAAI;AAACJ,MAAAA,cAAc,CAACI,QAAD,CAAd;AAAyB,KAAnE;AACAf,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACAF,IAAAA,UAAU,CAACkB,QAAX,CAAoB,aAApB,EAAmC;AACjCC,MAAAA,QAAQ,EAAE;AADuB,KAAnC;AAGD,GARD;;AASE,SACI,MAAC,IAAD;AAAM,IAAA,KAAK,EAAErB,MAAM,CAACsB,aAApB;AAAA,eACE,KAAC,OAAD;AAAW,MAAA,IAAI,EAAC;AAAhB,MADF,EAEE,KAAC,YAAD;AAAc,MAAA,SAAS,EAAC,iBAAxB;AAA0C,MAAA,QAAQ,EAAEb;AAApD,MAFF,EAGG,CAACN,SAAD,GAAc,KAAC,YAAD;AAAc,MAAA,OAAO,EAAEc;AAAvB,MAAd,GAAwD,KAAC,iBAAD;AAAmB,MAAA,IAAI,EAAC;AAAxB,MAH3D;AAAA,IADJ;AAOD,CA9BH;;AA+BE,eAAehB,gBAAf","sourcesContent":["import React, { useState } from 'react';\nimport { View, ActivityIndicator } from 'react-native';\nimport Heading from \"../components/Heading\";\nimport SearchButton from '../components/SearchButton';\nimport TextInputBox from \"../components/TextInput\"\nimport { fetchGeoData } from '../fetchData';\n//import styles from \"../styles/ButtonsStyle\"\nimport styles from \"../styles/ViewStyle\";\n\nconst SearchCityScreen = ({navigation}) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [inputText, setText] = useState('')\n  const [result, setResult] = useState('')\n\n\n  const handleChange = (e) =>{\n    setText(e.target.value)\n    console.log(inputText)\n\n  }\n  const handleResponse = (r) => {\n    setResult(r['geonames'][0]['population'])\n  }\n  const handleClick = () =>{\n    console.log(inputText)\n    setIsLoading(true)\n    fetchGeoData(inputText).then(response => {handleResponse(response)})\n    setIsLoading(false)\n    navigation.navigate(\"CityResults\", {\n      paramKey: 10000,\n    })\n  }\n    return (\n        <View style={styles.viewContainer}>\n          <Heading   text=\"SEARCH BY CITY\" />\n          <TextInputBox plcHolder=\"Enter a city...\" onChange={handleChange}/>\n          {!isLoading ? (<SearchButton onPress={handleClick} />) : <ActivityIndicator size=\"large\" />}\n       </View>\n    )\n  }\n  export default SearchCityScreen;"]},"metadata":{},"sourceType":"module"}