{"ast":null,"code":"var data = [];\n\nvar fetchGeoData = function fetchGeoData(userInput) {\n  var request = new XMLHttpRequest();\n  var result;\n  request.open(\"GET\", \"http://api.geonames.org/searchJSON?q=\" + userInput + \"&maxRows=100&username=weknowit\");\n  request.send();\n\n  request.onload = function () {\n    console.log(request);\n\n    if (request.status == 200) {\n      data.push(JSON.parse(request.response));\n    } else {\n      console.log('error');\n    }\n  };\n};\n\nvar filterAndSortResult = function filterAndSortResult(isCountrySearch, userInput) {\n  if (isCountrySearch) {\n    fetchGeoData(userInput);\n    console.log(\"hej\", data[0]);\n  }\n};\n\nvar getSearchResults = function getSearchResults(isCountrySearch, userInput) {\n  var data = filterAndSortResult(isCountrySearch, userInput);\n};\n\nexport { getSearchResults };","map":{"version":3,"sources":["/Users/akseluhr/Documents/GitHub/CityPop/fetchData.js"],"names":["data","fetchGeoData","userInput","request","XMLHttpRequest","result","open","send","onload","console","log","status","push","JSON","parse","response","filterAndSortResult","isCountrySearch","getSearchResults"],"mappings":"AAAA,IAAIA,IAAI,GAAG,EAAX;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,SAAD,EAAc;AACjC,MAAIC,OAAO,GAAG,IAAIC,cAAJ,EAAd;AACA,MAAIC,MAAJ;AACAF,EAAAA,OAAO,CAACG,IAAR,CAAa,KAAb,EAAoB,0CAAwCJ,SAAxC,GAAkD,gCAAtE;AACAC,EAAAA,OAAO,CAACI,IAAR;;AACAJ,EAAAA,OAAO,CAACK,MAAR,GAAiB,YAAM;AACrBC,IAAAA,OAAO,CAACC,GAAR,CAAYP,OAAZ;;AACA,QAAGA,OAAO,CAACQ,MAAR,IAAkB,GAArB,EAAyB;AACvBX,MAAAA,IAAI,CAACY,IAAL,CAAUC,IAAI,CAACC,KAAL,CAAWX,OAAO,CAACY,QAAnB,CAAV;AAED,KAHD,MAII;AACFN,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACD;AACF,GATD;AAUD,CAfD;;AAkBA,IAAMM,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,eAAD,EAAkBf,SAAlB,EAA+B;AACzD,MAAGe,eAAH,EAAmB;AACjBhB,IAAAA,YAAY,CAACC,SAAD,CAAZ;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBV,IAAI,CAAC,CAAD,CAAvB;AAED;AACF,CAND;;AAOA,IAAMkB,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACD,eAAD,EAAkBf,SAAlB,EAAgC;AACvD,MAAIF,IAAI,GAAGgB,mBAAmB,CAACC,eAAD,EAAkBf,SAAlB,CAA9B;AAGD,CAJD;;AAKA,SAAQgB,gBAAR","sourcesContent":["let data = []\n\nconst fetchGeoData = (userInput) =>{\n  let request = new XMLHttpRequest();\n  let result;\n  request.open(\"GET\", \"http://api.geonames.org/searchJSON?q=\"+userInput+\"&maxRows=100&username=weknowit\")\n  request.send();\n  request.onload = () => {\n    console.log(request);\n    if(request.status == 200){\n      data.push(JSON.parse(request.response))\n      //result = filterAndSortResult(isCountrySearch, data) \n    }\n    else{\n      console.log('error')\n    }\n  }\n}\n\n\nconst filterAndSortResult = (isCountrySearch, userInput) =>{\n  if(isCountrySearch){\n    fetchGeoData(userInput)\n    console.log(\"hej\", data[0])\n    //return data['geonames'][0]['population'];\n  }\n}\nconst getSearchResults = (isCountrySearch, userInput) => {\n  var data = filterAndSortResult(isCountrySearch, userInput)\n  //let result = filterAndSortResult(isCountrySearch, data)\n // console.log(data)\n}\nexport {getSearchResults};\n\n\n\n/* Didn't work\n\nconst fetchGeoData1 = () =>Â {\n    fetch('http://api.geonames.org/searchJSON?q=london&maxRows=10&username=weknowit')\n      .then(response => response.json)\n      .then(data => console.log(data));\n    }\n\n*/"]},"metadata":{},"sourceType":"module"}