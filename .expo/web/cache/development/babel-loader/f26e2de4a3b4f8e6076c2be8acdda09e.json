{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Heading from \"../components/Heading\";\nimport SearchButton from \"../components/SearchButton\";\nimport TextInputBox from \"../components/TextInput\";\nimport { fetchGeoData } from \"../fetchData\";\nimport styles from \"../styles/ViewStyle\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar SearchCityScreen = function SearchCityScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      inputText = _useState4[0],\n      setText = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      population = _useState6[0],\n      setPopulation = _useState6[1];\n\n  var handleResponse = function handleResponse(r) {\n    if (r['totalResultsCount'] == 0) {\n      alert(\"No results found, please try again.\");\n    } else {\n      setPopulation(r['geonames'][0]['population']);\n      setName(r['geonames'][0]['name']);\n    }\n  };\n\n  var handleClick = function handleClick() {\n    setIsLoading(true);\n    fetchGeoData(inputText).then(function (response) {\n      handleResponse(response), setIsLoading(false);\n    });\n  };\n\n  useEffect(function () {\n    if (population > 0 && inputText != '') {\n      navigation.navigate(\"CityResults\", {\n        country: inputText.toUpperCase(),\n        population: population\n      });\n    }\n  }, [{\n    population: population,\n    inputText: inputText\n  }]);\n  return _jsxs(View, {\n    style: styles.viewContainer,\n    children: [_jsx(Heading, {\n      text: \"SEARCH BY CITY\"\n    }), _jsx(TextInputBox, {\n      plcHolder: \"Enter a city...\",\n      value: inputText,\n      onChangeText: setText\n    }), !isLoading ? _jsx(SearchButton, {\n      onPress: handleClick\n    }) : _jsx(ActivityIndicator, {\n      size: \"large\"\n    })]\n  });\n};\n\nexport default SearchCityScreen;","map":{"version":3,"sources":["/Users/akseluhr/Documents/GitHub/CityPop/screens/SearchCityScreen.js"],"names":["React","useEffect","useState","Heading","SearchButton","TextInputBox","fetchGeoData","styles","SearchCityScreen","navigation","isLoading","setIsLoading","inputText","setText","population","setPopulation","handleResponse","r","alert","setName","handleClick","then","response","navigate","country","toUpperCase","viewContainer"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;;AAEA,OAAOC,OAAP;AACA,OAAOC,YAAP;AACA,OAAOC,YAAP;AACA,SAASC,YAAT;AAEA,OAAOC,MAAP;;;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,OAAkB;AAAA,MAAhBC,UAAgB,QAAhBA,UAAgB;;AACzC,kBAAkCP,QAAQ,CAAC,KAAD,CAA1C;AAAA;AAAA,MAAOQ,SAAP;AAAA,MAAkBC,YAAlB;;AACA,mBAA6BT,QAAQ,CAAC,EAAD,CAArC;AAAA;AAAA,MAAOU,SAAP;AAAA,MAAkBC,OAAlB;;AACA,mBAAoCX,QAAQ,EAA5C;AAAA;AAAA,MAAOY,UAAP;AAAA,MAAmBC,aAAnB;;AAEA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,CAAD,EAAO;AAC5B,QAAGA,CAAC,CAAC,mBAAD,CAAD,IAA0B,CAA7B,EAA+B;AAC7BC,MAAAA,KAAK,CAAC,qCAAD,CAAL;AACD,KAFD,MAEK;AACHH,MAAAA,aAAa,CAACE,CAAC,CAAC,UAAD,CAAD,CAAc,CAAd,EAAiB,YAAjB,CAAD,CAAb;AACAE,MAAAA,OAAO,CAACF,CAAC,CAAC,UAAD,CAAD,CAAc,CAAd,EAAiB,MAAjB,CAAD,CAAP;AACD;AACF,GAPD;;AAQA,MAAMG,WAAW,GAAG,SAAdA,WAAc,GAAK;AACvBT,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAL,IAAAA,YAAY,CAACM,SAAD,CAAZ,CAAwBS,IAAxB,CAA6B,UAAAC,QAAQ,EAAI;AAACN,MAAAA,cAAc,CAACM,QAAD,CAAd,EAA0BX,YAAY,CAAC,KAAD,CAAtC;AAA8C,KAAxF;AACD,GAHD;;AAKAV,EAAAA,SAAS,CAAC,YAAM;AACd,QAAGa,UAAU,GAAG,CAAb,IAAkBF,SAAS,IAAI,EAAlC,EAAqC;AACnCH,MAAAA,UAAU,CAACc,QAAX,CAAoB,aAApB,EAAmC;AACjCC,QAAAA,OAAO,EAAEZ,SAAS,CAACa,WAAV,EADwB;AAEjCX,QAAAA,UAAU,EAAEA;AAFqB,OAAnC;AAID;AACF,GAPQ,EAON,CAAC;AAACA,IAAAA,UAAU,EAAVA,UAAD;AAAaF,IAAAA,SAAS,EAATA;AAAb,GAAD,CAPM,CAAT;AAQE,SACI,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEL,MAAM,CAACmB,aAApB;AAAA,eACE,KAAC,OAAD;AAAW,MAAA,IAAI,EAAC;AAAhB,MADF,EAEE,KAAC,YAAD;AAAc,MAAA,SAAS,EAAC,iBAAxB;AAA0C,MAAA,KAAK,EAAEd,SAAjD;AAA4D,MAAA,YAAY,EAAEC;AAA1E,MAFF,EAGG,CAACH,SAAD,GAAc,KAAC,YAAD;AAAc,MAAA,OAAO,EAAEU;AAAvB,MAAd,GAAwD,KAAC,iBAAD;AAAmB,MAAA,IAAI,EAAC;AAAxB,MAH3D;AAAA,IADJ;AAOD,CAjCH;;AAkCE,eAAeZ,gBAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { View, ActivityIndicator, Alert } from 'react-native';\nimport Heading from \"../components/Heading\";\nimport SearchButton from '../components/SearchButton';\nimport TextInputBox from \"../components/TextInput\"\nimport { fetchGeoData } from '../fetchData';\n//import styles from \"../styles/ButtonsStyle\"\nimport styles from \"../styles/ViewStyle\";\n\nconst SearchCityScreen = ({navigation}) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [inputText, setText] = useState('')\n  const [population, setPopulation] = useState()\n\n  const handleResponse = (r) => {\n    if(r['totalResultsCount'] == 0){\n      alert(\"No results found, please try again.\")\n    }else{\n      setPopulation(r['geonames'][0]['population'])\n      setName(r['geonames'][0]['name'])\n    }\n  }\n  const handleClick = () =>{\n    setIsLoading(true)\n    fetchGeoData(inputText).then(response => {handleResponse(response), setIsLoading(false)})\n  }\n\n  useEffect(() => {\n    if(population > 0 && inputText != ''){\n      navigation.navigate(\"CityResults\", {\n        country: inputText.toUpperCase(),\n        population: population,\n      })\n    }\n  }, [{population, inputText}])\n    return (\n        <View style={styles.viewContainer}>\n          <Heading   text=\"SEARCH BY CITY\" />\n          <TextInputBox plcHolder=\"Enter a city...\" value={inputText} onChangeText={setText}/>\n          {!isLoading ? (<SearchButton onPress={handleClick} />) : <ActivityIndicator size=\"large\" />}\n       </View>\n    )\n  }\n  export default SearchCityScreen;"]},"metadata":{},"sourceType":"module"}