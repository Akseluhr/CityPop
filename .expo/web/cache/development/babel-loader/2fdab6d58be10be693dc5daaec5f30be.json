{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar data;\n\nfunction fetchGeoData(userInput) {\n  var request, result;\n  return _regeneratorRuntime.async(function fetchGeoData$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          request = new XMLHttpRequest();\n          request.open(\"GET\", \"http://api.geonames.org/searchJSON?q=\" + userInput + \"&maxRows=100&username=weknowit\");\n          request.send();\n\n          request.onload = function () {\n            console.log(request);\n\n            if (request.status == 200) {\n              data = push(JSON.parse(request.response));\n            } else {\n              console.log('error');\n            }\n          };\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nvar filterAndSortResult = function filterAndSortResult(isCountrySearch, userInput) {\n  if (isCountrySearch) {\n    fetchGeoData(userInput);\n    console.log(\"hej\", data);\n  }\n};\n\nvar getSearchResults = function getSearchResults(isCountrySearch, userInput) {\n  var data = filterAndSortResult(isCountrySearch, userInput);\n};\n\nexport { getSearchResults };","map":{"version":3,"sources":["/Users/akseluhr/Documents/GitHub/CityPop/fetchData.js"],"names":["data","fetchGeoData","userInput","request","XMLHttpRequest","open","send","onload","console","log","status","push","JSON","parse","response","filterAndSortResult","isCountrySearch","getSearchResults"],"mappings":";AAAA,IAAIA,IAAJ;;AAEA,SAAeC,YAAf,CAA4BC,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AACMC,UAAAA,OADN,GACgB,IAAIC,cAAJ,EADhB;AAGED,UAAAA,OAAO,CAACE,IAAR,CAAa,KAAb,EAAoB,0CAAwCH,SAAxC,GAAkD,gCAAtE;AACAC,UAAAA,OAAO,CAACG,IAAR;;AACAH,UAAAA,OAAO,CAACI,MAAR,GAAiB,YAAM;AACrBC,YAAAA,OAAO,CAACC,GAAR,CAAYN,OAAZ;;AACA,gBAAGA,OAAO,CAACO,MAAR,IAAkB,GAArB,EAAyB;AACvBV,cAAAA,IAAI,GAAGW,IAAI,CAACC,IAAI,CAACC,KAAL,CAAWV,OAAO,CAACW,QAAnB,CAAD,CAAX;AAED,aAHD,MAII;AACFN,cAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACD;AACF,WATD;;AALF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBA,IAAMM,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,eAAD,EAAkBd,SAAlB,EAA+B;AACzD,MAAGc,eAAH,EAAmB;AACjBf,IAAAA,YAAY,CAACC,SAAD,CAAZ;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBT,IAAnB;AAED;AACF,CAND;;AAOA,IAAMiB,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACD,eAAD,EAAkBd,SAAlB,EAAgC;AACvD,MAAIF,IAAI,GAAGe,mBAAmB,CAACC,eAAD,EAAkBd,SAAlB,CAA9B;AAGD,CAJD;;AAKA,SAAQe,gBAAR","sourcesContent":["let data;\n\nasync function fetchGeoData(userInput) {\n  let request = new XMLHttpRequest();\n  let result;\n  request.open(\"GET\", \"http://api.geonames.org/searchJSON?q=\"+userInput+\"&maxRows=100&username=weknowit\")\n  request.send();\n  request.onload = () => {\n    console.log(request);\n    if(request.status == 200){\n      data = push(JSON.parse(request.response))\n      //result = filterAndSortResult(isCountrySearch, data) \n    }\n    else{\n      console.log('error')\n    }\n  }\n}\n\n\nconst filterAndSortResult = (isCountrySearch, userInput) =>{\n  if(isCountrySearch){\n    fetchGeoData(userInput)\n    console.log(\"hej\", data)\n    //return data['geonames'][0]['population'];\n  }\n}\nconst getSearchResults = (isCountrySearch, userInput) => {\n  var data = filterAndSortResult(isCountrySearch, userInput)\n  //let result = filterAndSortResult(isCountrySearch, data)\n // console.log(data)\n}\nexport {getSearchResults};\n\n\n\n/* Didn't work\n\nconst fetchGeoData1 = () =>Â {\n    fetch('http://api.geonames.org/searchJSON?q=london&maxRows=10&username=weknowit')\n      .then(response => response.json)\n      .then(data => console.log(data));\n    }\n\n*/"]},"metadata":{},"sourceType":"module"}