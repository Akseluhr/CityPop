{"ast":null,"code":"var data;\n\nvar fetchGeoData = function fetchGeoData(userInput) {\n  var promise = new Promise(function (resolve, reject) {\n    var request = new XMLHttpRequest();\n    request.responseType = \"json\";\n    request.open(\"GET\", \"http://api.geonames.org/searchJSON?q=\" + userInput + \"&maxRows=100&username=weknowit\");\n    request.send();\n\n    request.onload = function () {\n      console.log(request);\n\n      if (request.status == 200) {\n        resolve(request.response);\n      } else {\n        console.log('error');\n        reject(request.response);\n      }\n    };\n  });\n  return promise;\n};\n\nvar filterAndSortResult = function filterAndSortResult(isCountrySearch, userInput) {\n  if (isCountrySearch) {\n    fetchGeoData(userInput);\n    console.log(\"hej\", data);\n  }\n};\n\nvar getSearchResults = function getSearchResults(isCountrySearch, userInput) {\n  fetchGeoData(userInput).then(function (response) {\n    console.log(\"res\", response), data = response;\n  });\n  console.log(\"funkar här \", data);\n};\n\nexport { getSearchResults };","map":{"version":3,"sources":["/Users/akseluhr/Documents/GitHub/CityPop/fetchData.js"],"names":["data","fetchGeoData","userInput","promise","Promise","resolve","reject","request","XMLHttpRequest","responseType","open","send","onload","console","log","status","response","filterAndSortResult","isCountrySearch","getSearchResults","then"],"mappings":"AAAA,IAAIA,IAAJ;;AAEA,IAAMC,YAAY,GAAE,SAAdA,YAAc,CAACC,SAAD,EAAe;AACjC,MAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/C,QAAIC,OAAO,GAAG,IAAIC,cAAJ,EAAd;AACAD,IAAAA,OAAO,CAACE,YAAR,GAAuB,MAAvB;AACAF,IAAAA,OAAO,CAACG,IAAR,CAAa,KAAb,EAAoB,0CAAwCR,SAAxC,GAAkD,gCAAtE;AACAK,IAAAA,OAAO,CAACI,IAAR;;AACAJ,IAAAA,OAAO,CAACK,MAAR,GAAiB,YAAM;AACrBC,MAAAA,OAAO,CAACC,GAAR,CAAYP,OAAZ;;AACA,UAAGA,OAAO,CAACQ,MAAR,IAAkB,GAArB,EAAyB;AACvBV,QAAAA,OAAO,CAACE,OAAO,CAACS,QAAT,CAAP;AACD,OAFD,MAGI;AACFH,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAR,QAAAA,MAAM,CAACC,OAAO,CAACS,QAAT,CAAN;AACD;AACF,KATD;AAUD,GAfe,CAAhB;AAgBA,SAAOb,OAAP;AACD,CAlBD;;AAqBA,IAAMc,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,eAAD,EAAkBhB,SAAlB,EAA+B;AACzD,MAAGgB,eAAH,EAAmB;AACjBjB,IAAAA,YAAY,CAACC,SAAD,CAAZ;AACAW,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBd,IAAnB;AAED;AACF,CAND;;AAOA,IAAMmB,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACD,eAAD,EAAkBhB,SAAlB,EAAgC;AACvDD,EAAAA,YAAY,CAACC,SAAD,CAAZ,CAAwBkB,IAAxB,CAA6B,UAAAJ,QAAQ,EAAI;AAACH,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBE,QAAnB,GAA8BhB,IAAI,GAAGgB,QAArC;AAA8C,GAAxF;AAGAH,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2Bd,IAA3B;AAGD,CAPD;;AAQA,SAAQmB,gBAAR","sourcesContent":["let data;\n\nconst fetchGeoData =(userInput) => {\n  const promise = new Promise((resolve, reject) => {\n    let request = new XMLHttpRequest();\n    request.responseType = \"json\";\n    request.open(\"GET\", \"http://api.geonames.org/searchJSON?q=\"+userInput+\"&maxRows=100&username=weknowit\")\n    request.send();\n    request.onload = () => {\n      console.log(request);\n      if(request.status == 200){\n        resolve(request.response)\n      }\n      else{\n        console.log('error')\n        reject(request.response)\n      }\n    }\n  });\n  return promise;\n}\n\n\nconst filterAndSortResult = (isCountrySearch, userInput) =>{\n  if(isCountrySearch){\n    fetchGeoData(userInput)\n    console.log(\"hej\", data)\n    //return data['geonames'][0]['population'];\n  }\n}\nconst getSearchResults = (isCountrySearch, userInput) => {\n  fetchGeoData(userInput).then(response => {console.log(\"res\", response), data = response})\n\n\n  console.log(\"funkar här \", data)\n  //let result = filterAndSortResult(isCountrySearch, data)\n // console.log(data)\n}\nexport {getSearchResults};\n\n\n\n/* Didn't work\n\nconst fetchGeoData1 = () => {\n    fetch('http://api.geonames.org/searchJSON?q=london&maxRows=10&username=weknowit')\n      .then(response => response.json)\n      .then(data => console.log(data));\n    }\n\n*/"]},"metadata":{},"sourceType":"module"}