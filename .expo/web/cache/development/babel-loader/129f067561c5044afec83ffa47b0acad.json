{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Heading from \"../components/Heading\";\nimport SearchButton from \"../components/SearchButton\";\nimport TextInputBox from \"../components/TextInput\";\nimport { fetchGeoData } from \"../fetchData\";\nimport styles from \"../styles/ViewStyle\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar SearchCityScreen = function SearchCityScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      inputText = _useState4[0],\n      setText = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      cityPopulation = _useState6[0],\n      setPopulation = _useState6[1];\n\n  var handleResponse = function handleResponse(r) {\n    if (r.totalResultsCount == 0) {\n      alert('No results found, please try again.');\n    } else {\n      setPopulation(r.geonames[0].population);\n      setName(r.geonames[0].name);\n    }\n  };\n\n  var handleClick = function handleClick() {\n    setIsLoading(true);\n    fetchGeoData(inputText).then(function (response) {\n      handleResponse(response), setIsLoading(false);\n    });\n  };\n\n  useEffect(function () {\n    if (cityPopulation > 0 && inputText != '') {\n      navigation.navigate('CityResults', {\n        name: inputText.toUpperCase(),\n        population: cityPopulation\n      });\n    }\n  }, [{\n    cityPopulation: cityPopulation,\n    inputText: inputText\n  }]);\n  return _jsxs(View, {\n    style: styles.viewContainer,\n    children: [_jsx(Heading, {\n      text: \"SEARCH BY CITY\"\n    }), _jsx(TextInputBox, {\n      plcHolder: \"Enter a city...\",\n      value: inputText,\n      onChangeText: setText\n    }), !isLoading ? _jsx(SearchButton, {\n      onPress: handleClick\n    }) : _jsx(ActivityIndicator, {\n      size: \"large\"\n    })]\n  });\n};\n\nexport default SearchCityScreen;","map":{"version":3,"sources":["/Users/akseluhr/Documents/GitHub/CityPop/screens/SearchCityScreen.js"],"names":["React","useEffect","useState","Heading","SearchButton","TextInputBox","fetchGeoData","styles","SearchCityScreen","navigation","isLoading","setIsLoading","inputText","setText","cityPopulation","setPopulation","handleResponse","r","totalResultsCount","alert","geonames","population","setName","name","handleClick","then","response","navigate","toUpperCase","viewContainer"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;AAEA,OAAOC,OAAP;AACA,OAAOC,YAAP;AACA,OAAOC,YAAP;AACA,SAASC,YAAT;AACA,OAAOC,MAAP;;;;AAGA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,OAAoB;AAAA,MAAjBC,UAAiB,QAAjBA,UAAiB;;AAC3C,kBAAkCP,QAAQ,CAAC,KAAD,CAA1C;AAAA;AAAA,MAAOQ,SAAP;AAAA,MAAkBC,YAAlB;;AACA,mBAA6BT,QAAQ,CAAC,EAAD,CAArC;AAAA;AAAA,MAAOU,SAAP;AAAA,MAAkBC,OAAlB;;AACA,mBAAwCX,QAAQ,EAAhD;AAAA;AAAA,MAAOY,cAAP;AAAA,MAAuBC,aAAvB;;AAGA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,CAAD,EAAO;AAC5B,QAAIA,CAAC,CAACC,iBAAF,IAAuB,CAA3B,EAA8B;AAC5BC,MAAAA,KAAK,CAAC,qCAAD,CAAL;AACD,KAFD,MAEO;AACLJ,MAAAA,aAAa,CAACE,CAAC,CAACG,QAAF,CAAW,CAAX,EAAcC,UAAf,CAAb;AACAC,MAAAA,OAAO,CAACL,CAAC,CAACG,QAAF,CAAW,CAAX,EAAcG,IAAf,CAAP;AACD;AACF,GAPD;;AASA,MAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxBb,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAL,IAAAA,YAAY,CAACM,SAAD,CAAZ,CAAwBa,IAAxB,CAA6B,UAAAC,QAAQ,EAAI;AAAEV,MAAAA,cAAc,CAACU,QAAD,CAAd,EAA0Bf,YAAY,CAAC,KAAD,CAAtC;AAA+C,KAA1F;AACD,GAHD;;AAOAV,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIa,cAAc,GAAG,CAAjB,IAAsBF,SAAS,IAAI,EAAvC,EAA2C;AACzCH,MAAAA,UAAU,CAACkB,QAAX,CAAoB,aAApB,EAAmC;AACjCJ,QAAAA,IAAI,EAAEX,SAAS,CAACgB,WAAV,EAD2B;AAEjCP,QAAAA,UAAU,EAAEP;AAFqB,OAAnC;AAID;AACF,GAPQ,EAON,CAAC;AAAEA,IAAAA,cAAc,EAAdA,cAAF;AAAkBF,IAAAA,SAAS,EAATA;AAAlB,GAAD,CAPM,CAAT;AAQA,SACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEL,MAAM,CAACsB,aAApB;AAAA,eACE,KAAC,OAAD;AAAS,MAAA,IAAI,EAAC;AAAd,MADF,EAEE,KAAC,YAAD;AAAc,MAAA,SAAS,EAAC,iBAAxB;AAA0C,MAAA,KAAK,EAAEjB,SAAjD;AAA4D,MAAA,YAAY,EAAEC;AAA1E,MAFF,EAGG,CAACH,SAAD,GAAc,KAAC,YAAD;AAAc,MAAA,OAAO,EAAEc;AAAvB,MAAd,GAAwD,KAAC,iBAAD;AAAmB,MAAA,IAAI,EAAC;AAAxB,MAH3D;AAAA,IADF;AAOD,CArCD;;AAsCA,eAAehB,gBAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { View, ActivityIndicator } from 'react-native'\nimport Heading from '../components/Heading'\nimport SearchButton from '../components/SearchButton'\nimport TextInputBox from '../components/TextInput'\nimport { fetchGeoData } from '../fetchData'\nimport styles from '../styles/ViewStyle'\n\n// Screen where user searches for a city.\nconst SearchCityScreen = ({ navigation }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [inputText, setText] = useState('')\n  const [cityPopulation, setPopulation] = useState()\n\n  // Triggered as soon as the app gets an API response.\n  const handleResponse = (r) => {\n    if (r.totalResultsCount == 0) {\n      alert('No results found, please try again.')\n    } else {\n      setPopulation(r.geonames[0].population)\n      setName(r.geonames[0].name)\n    }\n  }\n  // Triggered once the user presses the search button.\n  const handleClick = () => {\n    setIsLoading(true)\n    fetchGeoData(inputText).then(response => { handleResponse(response), setIsLoading(false) })\n  }\n\n  // Changes in population and inputText will trigger useEffect.\n  // If they are defined, navigate to next screen.\n  useEffect(() => {\n    if (cityPopulation > 0 && inputText != '') {\n      navigation.navigate('CityResults', {\n        name: inputText.toUpperCase(),\n        population: cityPopulation\n      })\n    }\n  }, [{ cityPopulation, inputText }])\n  return (\n    <View style={styles.viewContainer}>\n      <Heading text='SEARCH BY CITY' />\n      <TextInputBox plcHolder='Enter a city...' value={inputText} onChangeText={setText} />\n      {!isLoading ? (<SearchButton onPress={handleClick} />) : <ActivityIndicator size='large' />}\n    </View>\n  )\n}\nexport default SearchCityScreen\n"]},"metadata":{},"sourceType":"module"}