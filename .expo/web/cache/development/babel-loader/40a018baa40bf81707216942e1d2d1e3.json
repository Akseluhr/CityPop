{"ast":null,"code":"var data;\n\nvar fetchGeoDat = function fetchGeoDat(userInput) {\n  var promise = new Promise(function (resolve, reject) {\n    var request = new XMLHttpRequest();\n    request.open(\"GET\", \"http://api.geonames.org/searchJSON?q=\" + userInput + \"&maxRows=100&username=weknowit\");\n    request.send();\n\n    request.onload = function () {\n      console.log(request);\n\n      if (request.status == 200) {\n        data = JSON.parse(request.response);\n      } else {\n        console.log('error');\n      }\n    };\n  });\n};\n\nvar filterAndSortResult = function filterAndSortResult(isCountrySearch, userInput) {\n  if (isCountrySearch) {\n    fetchGeoData(userInput);\n    console.log(\"hej\", data);\n  }\n};\n\nvar getSearchResults = function getSearchResults(isCountrySearch, userInput) {\n  var data = filterAndSortResult(isCountrySearch, userInput);\n};\n\nexport { getSearchResults };","map":{"version":3,"sources":["/Users/akseluhr/Documents/GitHub/CityPop/fetchData.js"],"names":["data","fetchGeoDat","userInput","promise","Promise","resolve","reject","request","XMLHttpRequest","open","send","onload","console","log","status","JSON","parse","response","filterAndSortResult","isCountrySearch","fetchGeoData","getSearchResults"],"mappings":"AAAA,IAAIA,IAAJ;;AAEA,IAAMC,WAAW,GAAE,SAAbA,WAAa,CAACC,SAAD,EAAe;AAChC,MAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/C,QAAIC,OAAO,GAAG,IAAIC,cAAJ,EAAd;AAEAD,IAAAA,OAAO,CAACE,IAAR,CAAa,KAAb,EAAoB,0CAAwCP,SAAxC,GAAkD,gCAAtE;AACAK,IAAAA,OAAO,CAACG,IAAR;;AACAH,IAAAA,OAAO,CAACI,MAAR,GAAiB,YAAM;AACrBC,MAAAA,OAAO,CAACC,GAAR,CAAYN,OAAZ;;AACA,UAAGA,OAAO,CAACO,MAAR,IAAkB,GAArB,EAAyB;AACvBd,QAAAA,IAAI,GAAGe,IAAI,CAACC,KAAL,CAAWT,OAAO,CAACU,QAAnB,CAAP;AACD,OAFD,MAGI;AACFL,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACD;AACF,KARD;AASD,GAde,CAAhB;AAeD,CAhBD;;AAmBA,IAAMK,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,eAAD,EAAkBjB,SAAlB,EAA+B;AACzD,MAAGiB,eAAH,EAAmB;AACjBC,IAAAA,YAAY,CAAClB,SAAD,CAAZ;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBb,IAAnB;AAED;AACF,CAND;;AAOA,IAAMqB,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACF,eAAD,EAAkBjB,SAAlB,EAAgC;AACvD,MAAIF,IAAI,GAAGkB,mBAAmB,CAACC,eAAD,EAAkBjB,SAAlB,CAA9B;AAGD,CAJD;;AAKA,SAAQmB,gBAAR","sourcesContent":["let data;\n\nconst fetchGeoDat =(userInput) => {\n  const promise = new Promise((resolve, reject) => {\n    let request = new XMLHttpRequest();\n\n    request.open(\"GET\", \"http://api.geonames.org/searchJSON?q=\"+userInput+\"&maxRows=100&username=weknowit\")\n    request.send();\n    request.onload = () => {\n      console.log(request);\n      if(request.status == 200){\n        data = JSON.parse(request.response)\n      }\n      else{\n        console.log('error')\n      }\n    }\n  })\n}\n\n\nconst filterAndSortResult = (isCountrySearch, userInput) =>{\n  if(isCountrySearch){\n    fetchGeoData(userInput)\n    console.log(\"hej\", data)\n    //return data['geonames'][0]['population'];\n  }\n}\nconst getSearchResults = (isCountrySearch, userInput) => {\n  var data = filterAndSortResult(isCountrySearch, userInput)\n  //let result = filterAndSortResult(isCountrySearch, data)\n // console.log(data)\n}\nexport {getSearchResults};\n\n\n\n/* Didn't work\n\nconst fetchGeoData1 = () =>Â {\n    fetch('http://api.geonames.org/searchJSON?q=london&maxRows=10&username=weknowit')\n      .then(response => response.json)\n      .then(data => console.log(data));\n    }\n\n*/"]},"metadata":{},"sourceType":"module"}