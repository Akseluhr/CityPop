{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Heading from \"../components/Heading\";\nimport SearchButton from \"../components/SearchButton\";\nimport TextInputBox from \"../components/TextInput\";\nimport { fetchGeoData } from \"../fetchData\";\nimport styles from \"../styles/ViewStyle\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar SearchCountryScreen = function SearchCountryScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      inputText = _useState4[0],\n      setText = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      cityPopulations = _useState6[0],\n      setPopulations = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      cityNames = _useState8[0],\n      setNames = _useState8[1];\n\n  var handleResponse = function handleResponse(r) {\n    if (r.totalResultsCount == 0) {\n      alert('No results found, please try again.');\n    } else {\n      (function () {\n        var cities = [];\n\n        for (var i = 0; i < r.geonames.length; i++) {\n          if (r.geonames[i].fclName.includes('city')) {\n            cities.push(r.geonames[i]);\n          }\n        }\n\n        cities.sort(function (a, b) {\n          return b.population - a.population;\n        });\n        var largestCitiesByPop = cities.slice(0, 3);\n\n        var _loop = function _loop(_i) {\n          console.log(largestCitiesByPop[_i].population);\n          setPopulations(function (e) {\n            return [].concat(_toConsumableArray(e), [largestCitiesByPop[_i].population]);\n          });\n          setNames(function (e) {\n            return [].concat(_toConsumableArray(e), [largestCitiesByPop[_i].name]);\n          });\n        };\n\n        for (var _i = 0; _i < largestCitiesByPop.length; _i++) {\n          _loop(_i);\n        }\n      })();\n    }\n  };\n\n  var handleClick = function handleClick() {\n    setIsLoading(true);\n    fetchGeoData(inputText).then(function (response) {\n      handleResponse(response), setIsLoading(false);\n    });\n  };\n\n  useEffect(function () {\n    if ((cityPopulations.length && cityNames.length && inputText.length) > 0) {\n      console.log(inputText);\n      navigation.navigate('CountryResults', {\n        country: inputText.toUpperCase(),\n        populations: cityPopulations,\n        cities: cityNames\n      });\n    }\n  }, [{\n    cityPopulations: cityPopulations,\n    cityNames: cityNames,\n    inputText: inputText\n  }]);\n  return _jsxs(View, {\n    style: styles.viewContainer,\n    children: [_jsx(Heading, {\n      text: \"SEARCH BY COUNTRY\"\n    }), _jsx(TextInputBox, {\n      plcHolder: \"Enter a country...\",\n      value: inputText,\n      onChangeText: setText\n    }), !isLoading ? _jsx(SearchButton, {\n      onPress: handleClick\n    }) : _jsx(ActivityIndicator, {\n      size: \"large\"\n    })]\n  });\n};\n\nexport default SearchCountryScreen;","map":{"version":3,"sources":["/Users/akseluhr/Documents/GitHub/CityPop/screens/SearchCountryScreen.js"],"names":["React","useEffect","useState","Heading","SearchButton","TextInputBox","fetchGeoData","styles","SearchCountryScreen","navigation","isLoading","setIsLoading","inputText","setText","cityPopulations","setPopulations","cityNames","setNames","handleResponse","r","totalResultsCount","alert","cities","i","geonames","length","fclName","includes","push","sort","a","b","population","largestCitiesByPop","slice","console","log","e","name","handleClick","then","response","navigate","country","toUpperCase","populations","viewContainer"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { View, ActivityIndicator } from 'react-native'\nimport Heading from '../components/Heading'\nimport SearchButton from '../components/SearchButton'\nimport TextInputBox from '../components/TextInput'\nimport { fetchGeoData } from '../fetchData'\nimport styles from '../styles/ViewStyle'\n\n// Screen where user searches for a country.\nconst SearchCountryScreen = ({ navigation }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [inputText, setText] = useState('')\n  const [cityPopulations, setPopulations] = useState([])\n  const [cityNames, setNames] = useState([])\n\n  // Triggered as soon as the app gets an API response.\n  const handleResponse = (r) => {\n    if (r.totalResultsCount == 0) {\n      alert('No results found, please try again.')\n    } else {\n      const cities = []\n\n      // Taking only cities from the response.\n      for (let i = 0; i < r.geonames.length; i++) {\n        if (r.geonames[i].fclName.includes('city')) {\n          cities.push(r.geonames[i])\n        }\n      }\n\n      // Sort on population in descending order.\n      cities.sort((a, b) => b.population - a.population)\n      // Take first three cities.\n      const largestCitiesByPop = cities.slice(0, 3)\n\n      // Set state for population and city names.\n      for (let i = 0; i < largestCitiesByPop.length; i++) {\n        console.log(largestCitiesByPop[i].population)\n        setPopulations(e => [...e, largestCitiesByPop[i].population])\n        setNames(e => [...e, largestCitiesByPop[i].name])\n      }\n    }\n  }\n\n  // Triggered once the user presses the search button.\n  const handleClick = () => {\n    setIsLoading(true)\n    fetchGeoData(inputText).then(response => { handleResponse(response), setIsLoading(false) })\n  }\n\n  // Changes in populations, city names and inputText will trigger useEffect.\n  // If they are defined, navigate to next screen.\n  useEffect(() => {\n    if ((cityPopulations.length && cityNames.length && inputText.length) > 0) {\n      console.log(inputText)\n      navigation.navigate('CountryResults', {\n        country: inputText.toUpperCase(),\n        populations: cityPopulations,\n        cities: cityNames\n      })\n    }\n  }, [{ cityPopulations, cityNames, inputText }])\n  return (\n    <View style={styles.viewContainer}>\n      <Heading text='SEARCH BY COUNTRY' />\n      <TextInputBox plcHolder='Enter a country...' value={inputText} onChangeText={setText} />\n      {!isLoading ? (<SearchButton onPress={handleClick} />) : <ActivityIndicator size='large' />}\n    </View>\n  )\n}\nexport default SearchCountryScreen\n"]},"metadata":{},"sourceType":"module"}