{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Heading from \"../components/Heading\";\nimport SearchButton from \"../components/SearchButton\";\nimport TextInputBox from \"../components/TextInput\";\nimport { fetchGeoData } from \"../fetchData\";\nimport styles from \"../styles/ViewStyle\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar SearchCountryScreen = function SearchCountryScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      inputText = _useState4[0],\n      setText = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      populations = _useState6[0],\n      setPopulations = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      names = _useState8[0],\n      setNames = _useState8[1];\n\n  var handleChange = function handleChange(e) {\n    setText(e.target.value);\n  };\n\n  var handleResponse = function handleResponse(r) {\n    var cities = [];\n    var cityNames = [];\n    var cityPopulations = [];\n\n    for (var i = 0; i < r['geonames'].length; i++) {\n      if (r['geonames'][i]['fclName'].includes(\"city\")) {\n        cities.push(r['geonames'][i]);\n      }\n    }\n\n    cities.sort(function (a, b) {\n      return b['population'] - a['population'];\n    });\n    var largestCitiesByPop = cities.slice(0, 3);\n\n    for (var _i = 0; _i < largestCitiesByPop.length; _i++) {\n      cityNames.push(largestCitiesByPop[_i]['name']);\n      cityPopulations.push(largestCitiesByPop[_i]['population']);\n    }\n\n    console.log(\"names\", cityNames);\n    console.log(\"pops\", cityPopulations);\n    setPopulations(function (populations) {\n      return [cityPopulations];\n    });\n    setNames(function (names) {\n      return [cityNames];\n    });\n  };\n\n  var handleClick = function handleClick() {\n    setIsLoading(true);\n    fetchGeoData(inputText).then(function (response) {\n      handleResponse(response);\n    }).catch(console.log(\"Error\"));\n    setIsLoading(false);\n  };\n\n  useEffect(function () {\n    if ((populations.length && names.length) > 0) {\n      navigation.navigate(\"CountryResults\", {\n        population: populations,\n        name: names\n      });\n    }\n  }, [{\n    populations: populations,\n    names: names\n  }]);\n  return _jsxs(View, {\n    style: styles.viewContainer,\n    children: [_jsx(Heading, {\n      text: \"SEARCH BY COUNTRY\"\n    }), _jsx(TextInputBox, {\n      plcHolder: \"Enter a country...\",\n      onChange: handleChange\n    }), !isLoading ? _jsx(SearchButton, {\n      onPress: handleClick\n    }) : _jsx(ActivityIndicator, {\n      size: \"large\"\n    })]\n  });\n};\n\nexport default SearchCountryScreen;","map":{"version":3,"sources":["/Users/akseluhr/Documents/GitHub/CityPop/screens/SearchCountryScreen.js"],"names":["React","useEffect","useState","Heading","SearchButton","TextInputBox","fetchGeoData","styles","SearchCountryScreen","navigation","isLoading","setIsLoading","inputText","setText","populations","setPopulations","names","setNames","handleChange","e","target","value","handleResponse","r","cities","cityNames","cityPopulations","i","length","includes","push","sort","a","b","largestCitiesByPop","slice","console","log","handleClick","then","response","catch","navigate","population","name","viewContainer"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { View, ActivityIndicator } from 'react-native';\nimport Heading from \"../components/Heading\";\nimport SearchButton from '../components/SearchButton';\nimport TextInputBox from \"../components/TextInput\"\nimport { fetchGeoData } from '../fetchData';\n//import styles from \"../styles/ButtonsStyle\"\nimport styles from \"../styles/ViewStyle\"\n\nconst SearchCountryScreen = ({navigation}) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [inputText, setText] = useState('')\n  const [populations, setPopulations] = useState([])\n  const [names, setNames] = useState([])\n\n  const handleChange = (e) =>{\n    setText(e.target.value)\n  }\n  const handleResponse = (r) => {\n    let cities = []\n    let cityNames = []\n    let cityPopulations = []\n    for(let i = 0; i < r['geonames'].length; i++){\n      if(r['geonames'][i]['fclName'].includes(\"city\")){\n        cities.push(r['geonames'][i])\n      }\n    }\n\n    //Sort in descending order\n    cities.sort((a, b) => b['population'] - a['population'])\n    let largestCitiesByPop = cities.slice(0, 3)\n\n    for(let i = 0; i < largestCitiesByPop.length; i++){\n      cityNames.push(largestCitiesByPop[i]['name'])\n      cityPopulations.push(largestCitiesByPop[i]['population'])\n    }\n    \n    console.log(\"names\", cityNames)\n    console.log(\"pops\", cityPopulations)\n\n    setPopulations(populations => [cityPopulations])\n    setNames(names => [cityNames])\n  }\n  const handleClick = () =>{\n    setIsLoading(true)\n    fetchGeoData(inputText).then(response => {handleResponse(response)}).catch(console.log(\"Error\"))\n    setIsLoading(false)\n  }\n\n  useEffect(() => {\n    if((populations.length && names.length)> 0){\n      navigation.navigate(\"CountryResults\", {\n        population: populations,\n        name: names\n      })\n    }\n  }, [{populations, names}])\n    return (\n        <View style={styles.viewContainer}>\n          <Heading   text=\"SEARCH BY COUNTRY\" />\n          <TextInputBox plcHolder=\"Enter a country...\" onChange={handleChange}/>\n          {!isLoading ? (<SearchButton onPress={handleClick} />) : <ActivityIndicator size=\"large\" />}\n       </View>\n    )\n  }\n  export default SearchCountryScreen;"]},"metadata":{},"sourceType":"module"}